`default_nettype none

module cpu_test(
  input wire clk,
  output wire result_out,
  output reg done
  );


cpu cpu (
  .i_clk(clk),
  .cpu_output(out_data),
  .uart_rx_unsafe(uart_rx),
  .uart_tx(uart_tx)
);

wire uart_tx;
reg  uart_rx = 1'b1;
wire [7:0] out_data;
reg [7:0] expected = 8'h00;

wire [31:0] result = out_data - expected;
reg output_valid = 1'b1;
assign result_out = 1'b0; // |result & output_valid;

initial begin
done = 1'b0;
output_valid = 0;

uart_rx = 0;
#139 // start
// 00101010 0x54 'T'
uart_rx = 0;
#139 // LSB
uart_rx = 0;
#139
uart_rx = 1;
#139
uart_rx = 0;
#139
uart_rx = 1;
#139
uart_rx = 0;
#139
uart_rx = 1;
#139
uart_rx = 0;
#139 // MSB
uart_rx = 1;
#139 // stop bit

uart_rx = 0;
#139 // start
// 00101010 0x54 'T'
uart_rx = 0;
#139 // LSB
uart_rx = 0;
#139
uart_rx = 1;
#139
uart_rx = 0;
#139
uart_rx = 1;
#139
uart_rx = 0;
#139
uart_rx = 1;
#139
uart_rx = 0;
#139 // MSB
uart_rx = 1;
#139 // stop bit

uart_rx = 0;
#139 // start
// 00101010 0x54 'T'
uart_rx = 0;
#139 // LSB
uart_rx = 0;
#139
uart_rx = 1;
#139
uart_rx = 0;
#139
uart_rx = 1;
#139
uart_rx = 0;
#139
uart_rx = 1;
#139
uart_rx = 0;
#139 // MSB
uart_rx = 1;
#139 // stop bit

uart_rx = 0;
#139 // start
// 00101010 0x54 'T'
uart_rx = 0;
#139 // LSB
uart_rx = 0;
#139
uart_rx = 1;
#139
uart_rx = 0;
#139
uart_rx = 1;
#139
uart_rx = 0;
#139
uart_rx = 1;
#139
uart_rx = 0;
#139 // MSB
uart_rx = 1;
#139 // stop bit

#1000
output_valid = 1'b0;
done = 1'b1;
end

endmodule
