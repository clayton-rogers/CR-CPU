`default_nettype none

module ram_test(
  input wire clk,
  output wire result_out,
  output reg done
  );


reg load = 1'b0;
reg [15:0] in_data = 16'hffff;
reg [7:0] addr = 16'h0000;
wire [15:0] out_data;
ram r(.i_clk(clk), .i_load(load), .i_addr(addr), .i_data(in_data), .o_data(out_data));

reg [15:0] expected = 16'h0000;

wire [31:0] result = out_data - expected;
reg output_valid = 1'b1;
assign result_out = |result & output_valid;

initial begin
done = 1'b0;
output_valid = 0;
#1
// Load a few values
load = 1;
addr = 16'h0000;
in_data = 16'hFFFF;
#1 // one clock delay before result is written and output
addr = 1;
in_data = 4;
#1
addr = 2;
in_data = 10;
#1
addr = 255;
in_data = 60_000;
#1
load = 0;
// Verify that those values can be read again
addr = 0;
output_valid = 1;
expected = 16'hFFFF;
#1
// Verify that one clock later the output is still 0xFFFF
#1
// And again one clock later

#1
addr = 1;
expected = 4;

#1
addr = 2;
expected = 10;

#1
addr = 255;
expected = 60_000;

#1
// Verify values can be over written
addr = 2;
load = 1;
in_data = 11;
expected = 10; // expected is still the old value at addr 2
#1
load = 0;
expected = 11; // one clock later addr 2 has been written

#1
addr = 1;
expected = 4; // addr 1 is unchanged

#1
addr = 2;
expected = 11; // addr 2 is still the new value

#1
load = 0;
output_valid = 1;
# 1
//

#1
output_valid = 1'b0;
done = 1'b1;
end

endmodule
