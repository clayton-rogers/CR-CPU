`default_nettype none

module program_counter_test(
  input wire clk,
  output wire result_out,
  output reg done
  );

reg inc = 0;
wire [15:0] inst;

program_counter #(.PROGRAM_FILENAME("pc_ram.hex")) pc
  (.i_clk(clk), .i_inc(inc), .o_instruction(inst));

reg [15:0] expected = 16'h0000;

wire [31:0] result = inst - expected;
reg output_valid = 1'b0;
assign result_out = |result & output_valid;

initial begin
done = 1'b0;
inc = 0;
#1 // takes one clock to get the first instruction
expected = 16'h1234;
output_valid = 1;
#3 // Output continues as long as pc is not incremented
inc = 1;
expected = 16'h1234;
#1
expected = 16'h5678;
inc = 0;
#3 // again, continues to hold output
inc = 1;
#1
expected = 16'h9abc;
#1
expected = 16'hdef1;
#1
expected = 16'hff01;
#1
expected = 16'hff02;
#1
expected = 16'hff03;
#1
expected = 16'hff04;
#1


output_valid = 1'b0;
done = 1'b1;
end

endmodule
