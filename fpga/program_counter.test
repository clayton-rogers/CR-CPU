`default_nettype none

module program_counter_test(
  input wire clk,
  output wire result_out,
  output reg done
  );

reg inc = 0;
reg [7:0] in_addr;

wire [15:0] inst;
reg [15:0] expected_inst = 16'h0000;
wire [7:0] out_addr;
reg [7:0] expected_addr = 8'h00;

// the expected output address is always the
// one clock delay of the input address
always @ ( posedge clk ) begin
  expected_addr <= in_addr;
end

reg load = 0;
program_counter #(.PROGRAM_FILENAME("pc_ram.hex")) pc
  (.i_clk(clk),
   .i_inc(inc),
   .i_load(load),
   .i_addr(in_addr),
   .o_addr(out_addr),
   .o_instruction(inst));

wire [16:0] result = inst - expected_inst;
wire [8:0] result_addr = out_addr - expected_addr;
reg output_valid = 1'b0;
assign result_out = |result & |result_addr & output_valid;

initial begin
done = 1'b0;
inc = 0;
#1 // takes one clock to get the first instruction
expected_inst = 16'h1234;
output_valid = 1;
#3 // Output continues as long as pc is not incremented
inc = 1;
expected_inst = 16'h1234;
#1
expected_inst = 16'h5678;
inc = 0;
#3 // again, continues to hold output
inc = 1;
#1
expected_inst = 16'h9abc;
#1
expected_inst = 16'hdef1;
#1
expected_inst = 16'hff01;
#1
expected_inst = 16'hff02;
#1
expected_inst = 16'hff03;
#1
expected_inst = 16'hff04;
#1

// test that the address can be set
expected_inst = 16'hff05;
load = 1;
in_addr = 8'h02;
#1
// Expected instruction should not be the one from location 2
load = 0;
expected_inst = 16'h9abc;
#1
expected_inst = 16'hdef1;
#1
expected_inst = 16'hff01;
#1

output_valid = 1'b0;
done = 1'b1;
end

endmodule
