#include "tokens.h"

#include <map>

static const std::map<TokenType, std::string> TOKEN_STRINGS =
{
	{TokenType::unk, "unk"},
	{TokenType::key_struct, "key_struct"},
	{TokenType::key_union, "key_union"},
	{TokenType::key_void, "key_void"},
	{TokenType::key_char, "key_char"},
	{TokenType::key_short, "key_short"},
	{TokenType::key_int, "key_int"},
	{TokenType::key_long, "key_long"},
	{TokenType::key_float, "key_float"},
	{TokenType::key_double, "key_double"},
	{TokenType::key_signed, "key_signed"},
	{TokenType::key_unsigned, "key_unsigned"},
	{TokenType::key_return, "key_return"},
	{TokenType::key_case, "key_case"},
	{TokenType::key_break, "key_break"},
	{TokenType::key_continue, "key_continue"},
	{TokenType::key_default, "key_default"},
	{TokenType::key_do, "key_do"},
	{TokenType::key_else, "key_else"},
	{TokenType::key_enum, "key_enum"},
	{TokenType::key_for, "key_for"},
	{TokenType::key_goto, "key_goto"},
	{TokenType::key_if, "key_if"},
	{TokenType::key_switch, "key_switch"},
	{TokenType::key_while, "key_while"},
	{TokenType::key_const, "key_const"},
	{TokenType::key_volatile, "key_volatile"},
	{TokenType::key_typedef, "key_typedef"},
	{TokenType::key_extern, "key_extern"},
	{TokenType::key_static, "key_static"},
	{TokenType::key_auto, "key_auto"},
	{TokenType::key_register, "key_register"},
	{TokenType::equals, "equals"},
	{TokenType::add, "add"},
	{TokenType::sub, "sub"},
	{TokenType::star, "star"},
	{TokenType::tilda, "tilda"},
	{TokenType::exclam, "exclam"},
	{TokenType::div, "div"},
	{TokenType::percent, "percent"},
	{TokenType::ampersand, "ampersand"},
	{TokenType::pipe, "pipe"},
	{TokenType::question, "question"},
	{TokenType::hat, "hat"},
	{TokenType::period, "period"},
	{TokenType::comma, "comma"},
	{TokenType::semi_colon, "semi_colon"},
	{TokenType::colon, "colon"},
	{TokenType::less_than, "less_than"},
	{TokenType::greater_than, "greater_than"},
	{TokenType::open_bracket, "open_bracket"},
	{TokenType::close_bracket, "close_bracket"},
	{TokenType::open_parenth, "open_parenth"},
	{TokenType::close_parenth, "close_parenth"},
	{TokenType::open_square_bracket, "open_square_bracket"},
	{TokenType::close_square_bracket, "close_square_bracket"},
	{TokenType::identifier, "identifier"},
	{TokenType::constant, "constant"},
	{TokenType::string_literal, "string_literal"},
	{TokenType::a_sizeof, "a_sizeof"},
	{TokenType::ptr_op, "ptr_op"},
	{TokenType::inc_op, "inc_op"},
	{TokenType::dec_op, "dec_op"},
	{TokenType::left_op, "left_op"},
	{TokenType::right_op, "right_op"},
	{TokenType::le_op, "le_op"},
	{TokenType::ge_op, "ge_op"},
	{TokenType::eq_op, "eq_op"},
	{TokenType::ne_op, "ne_op"},
	{TokenType::and_op, "and_op"},
	{TokenType::or_op, "or_op"},
	{TokenType::mul_assign, "mul_assign"},
	{TokenType::div_assign, "div_assign"},
	{TokenType::mod_assign, "mod_assign"},
	{TokenType::add_assign, "add_assign"},
	{TokenType::sub_assign, "sub_assign"},
	{TokenType::left_assign, "left_assign"},
	{TokenType::right_assign, "right_assign"},
	{TokenType::and_assign, "and_assign"},
	{TokenType::xor_assign, "xor_assign"},
	{TokenType::or_assign, "or_assign"},
	{TokenType::primary_expression, "primary_expression"},
	{TokenType::postfix_expression, "postfix_expression"},
	{TokenType::argument_expression_list, "argument_expression_list"},
	{TokenType::unary_expression, "unary_expression"},
	{TokenType::unary_operator, "unary_operator"},
	{TokenType::cast_expression, "cast_expression"},
	{TokenType::multiplicative_expression, "multiplicative_expression"},
	{TokenType::additive_expression, "additive_expression"},
	{TokenType::shift_expression, "shift_expression"},
	{TokenType::relational_expression, "relational_expression"},
	{TokenType::equality_expression, "equality_expression"},
	{TokenType::and_expression, "and_expression"},
	{TokenType::exclusive_or_expression, "exclusive_or_expression"},
	{TokenType::inclusive_or_expression, "inclusive_or_expression"},
	{TokenType::logical_and_expression, "logical_and_expression"},
	{TokenType::logical_or_expression, "logical_or_expression"},
	{TokenType::conditional_expression, "conditional_expression"},
	{TokenType::assignment_expression, "assignment_expression"},
	{TokenType::assignemnt_operator, "assignemnt_operator"},
	{TokenType::expression, "expression"},
	{TokenType::constant_expression, "constant_expression"},
	{TokenType::declaration, "declaration"},
	{TokenType::declaration_specifiers, "declaration_specifiers"},
	{TokenType::init_declarator_list, "init_declarator_list"},
	{TokenType::init_declarator, "init_declarator"},
	{TokenType::storage_class_specifier, "storage_class_specifier"},
	{TokenType::type_specifier, "type_specifier"},
	{TokenType::struct_or_union_specifier, "struct_or_union_specifier"},
	{TokenType::struct_or_union, "struct_or_union"},
	{TokenType::struct_declaration_list, "struct_declaration_list"},
	{TokenType::struct_declaration, "struct_declaration"},
	{TokenType::specifier_qualifier_list, "specifier_qualifier_list"},
	{TokenType::struct_declarator_list, "struct_declarator_list"},
	{TokenType::struct_declarator, "struct_declarator"},
	{TokenType::enum_specifier, "enum_specifier"},
	{TokenType::enumerator_list, "enumerator_list"},
	{TokenType::enumerator, "enumerator"},
	{TokenType::type_qualifier, "type_qualifier"},
	{TokenType::declarator, "declarator"},
	{TokenType::direct_declarator, "direct_declarator"},
	{TokenType::pointer, "pointer"},
	{TokenType::type_qualifier_list, "type_qualifier_list"},
	{TokenType::parameter_type_list, "parameter_type_list"},
	{TokenType::parameter_list, "parameter_list"},
	{TokenType::parameter_declaration, "parameter_declaration"},
	{TokenType::identifier_list, "identifier_list"},
	{TokenType::type_name, "type_name"},
	{TokenType::abstract_declarator, "abstract_declarator"},
	{TokenType::direct_abstract_declarator, "direct_abstract_declarator"},
	{TokenType::initializer, "initializer"},
	{TokenType::initializer_list, "initializer_list"},
	{TokenType::statement, "statement"},
	{TokenType::labeled_statement, "labeled_statement"},
	{TokenType::compound_statement, "compound_statement"},
	{TokenType::declaration_list, "declaration_list"},
	{TokenType::statement_list, "statement_list"},
	{TokenType::expression_statement, "expression_statement"},
	{TokenType::selection_statement, "selection_statement"},
	{TokenType::iteration_statement, "iteration_statement"},
	{TokenType::jump_statement, "jump_statement"},
	{TokenType::translation_unit, "translation_unit"},
	{TokenType::external_declaration, "external_declaration"},
	{TokenType::function_definition, "function_definition"},
	{TokenType::last_token, "last_token"},
};

std::string token_to_string(TokenType token) {
	return TOKEN_STRINGS.at(token);
}

